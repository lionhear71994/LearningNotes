一、顺序表
	操作：
		初始化顺序表、插入、追加、查询、删除、显示所有、计算长度
	
二、链表
	引用域与数据域
	头引用(无数据域)      表尾：有数据引用为null
	操作：
		追加、插入头结点、插入结点、查询、删除、计算长度、显示所有
	
三、栈
	顺序栈：先进后出
	链表栈
	操作：
		入栈push、出栈pop、空栈、满栈
		
四、队列
	先进先出
	队头删除、队尾加入
	操作：
		入列、出列

五、树		非线性
	除根结点外，结点有且仅有一个直接前驱
	结点度：结点的子树数量
	树的度：所有结点最大的度
	叶结点与分支结点
	二叉树：每个结点最多两个子树
	满二叉树与完全二叉树的区别：最后一层，完全二叉树可不满
	完全二叉树性质：
		任意结点m！=1，其父结点n=m/2，左子结点=2m,右子结点=2m+1,树深度=[log₂n]+1
	操作：
		初始化、
		添加结点: 入参 根结点引用 添加的数据 要添加位置的父结点数据，查找该父结点，找到后再选择插入左结点还是右结点
		查找结点：入参 根结点引用和要查询数据；查询根结点后分别像左右子结点进行递归查找
		树的深度计算：左右子树的递归调用，比较后返回大的那个加一
		遍历：
			a 按层遍历：
			b 按根序遍历：中序是重点，把每个结点都看成单独的二叉。
			
六、图		非线性		顶点 Vertex		边 Edge
	有向图	顶点入度、出度	有向完全图与无向完全图 子图 路径 
	连通图 连通分量   强连通(有向)
	char[] vertex 保存顶点信息		int[][] edgeweight 保存边的权
	图的遍历： 	广度优先法 	深度优先法：类似先序
	
		
	
	